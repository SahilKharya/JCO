{
  "stats": {
    "suites": 27,
    "tests": 70,
    "passes": 70,
    "pending": 0,
    "failures": 0,
    "start": "2023-03-11T06:04:22.664Z",
    "end": "2023-03-11T06:06:38.251Z",
    "duration": 135587,
    "testsRegistered": 70,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "b4ac5058-8f0a-4a06-92c5-6a0138b439fb",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "02707964-d693-45e6-9022-550d35469118",
          "title": "Fundraising Contract",
          "fullFile": "D:\\JCO\\main\\test\\1_Fundraising_test.js",
          "file": "\\test\\1_Fundraising_test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Fundraising Contract\"",
              "fullTitle": "Fundraising Contract \"before each\" hook in \"Fundraising Contract\"",
              "timedOut": false,
              "duration": 1610,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(10000);\n[owner, account1, account2, account3] = await ethers.getSigners();\naccounts = [owner.address, account1.address, account2.address];\nTreasury = await ethers.getContractFactory(\"Treasury\");\ntreasury = await Treasury.deploy();\nJCO = await ethers.getContractFactory(\"JCO\");\njco = await JCO.deploy(treasury.address, \"JCO_Ganache\", \"JCO\");\nJCO_Manager = await ethers.getContractFactory(\"JCO_Manager\");\njco_manager = await JCO_Manager.deploy(jco.address);\nFundraising = await ethers.getContractFactory(\"Fundraising\");\nfundraising = await Fundraising.deploy(accounts, 2, jco.address, jco_manager.address);\nRewards = await ethers.getContractFactory(\"Rewards\");\nrewards = await Rewards.deploy(accounts, 2, jco.address, jco_manager.address);\nTeam = await ethers.getContractFactory(\"Team\");\nteam = await Team.deploy(accounts, 2, jco.address, jco_manager.address);\nAdvisors = await ethers.getContractFactory(\"Advisors\");\nadvisors = await Advisors.deploy(accounts, 2, jco.address, jco_manager.address);\nMarketing = await ethers.getContractFactory(\"Marketing\");\nmarketing = await Marketing.deploy(accounts, 2, jco.address, jco_manager.address);\nExchange = await ethers.getContractFactory(\"Exchange\");\nexchange = await Exchange.deploy(accounts, 2, jco.address, jco_manager.address);\nFoundation = await ethers.getContractFactory(\"Foundation\");\nfoundation = await Foundation.deploy(accounts, 2, jco.address, jco_manager.address);\nStaking = await ethers.getContractFactory(\"Staking\");\nstaking = await Staking.deploy(accounts, 2, jco.address, jco_manager.address);\nMultiSig_Treasury = await ethers.getContractFactory(\"MultiSig_Treasury\");\nmultisig = await MultiSig_Treasury.deploy(accounts, 2, jco.address, treasury.address, jco_manager.address, [\n    fundraising.address,\n    rewards.address,\n    team.address,\n    advisors.address,\n    marketing.address,\n    exchange.address,\n    foundation.address,\n    staking.address,\n]);\nawait jco_manager.addWallets(\n    treasury.address,\n    multisig.address,\n    fundraising.address,\n    rewards.address,\n    team.address,\n    advisors.address,\n    marketing.address,\n    exchange.address,\n    foundation.address,\n    staking.address\n);",
              "err": {},
              "uuid": "bf00da68-7494-4225-8703-6f3380ca6279",
              "parentUUID": "02707964-d693-45e6-9022-550d35469118",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "8d620b27-4b07-437b-87a4-aa178a1f0556",
              "title": "Deployment",
              "fullFile": "D:\\JCO\\main\\test\\1_Fundraising_test.js",
              "file": "\\test\\1_Fundraising_test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should assign the manager",
                  "fullTitle": "Fundraising Contract Deployment Should assign the manager",
                  "timedOut": false,
                  "duration": 37,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(await fundraising.manager()).to.equal(jco_manager.address);",
                  "err": {},
                  "uuid": "a3e5eee4-e261-48c1-8e84-8f16ff6c74c4",
                  "parentUUID": "8d620b27-4b07-437b-87a4-aa178a1f0556",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should set the number of confirmations required",
                  "fullTitle": "Fundraising Contract Deployment Should set the number of confirmations required",
                  "timedOut": false,
                  "duration": 39,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(await fundraising.numConfirmationsRequired()).to.equal(2);",
                  "err": {},
                  "uuid": "71afdb97-a115-427e-aaec-bb5728f2c3f6",
                  "parentUUID": "8d620b27-4b07-437b-87a4-aa178a1f0556",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should set the owners",
                  "fullTitle": "Fundraising Contract Deployment Should set the owners",
                  "timedOut": false,
                  "duration": 29,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(await jco_manager.getOwners_OW()).to.eql(accounts);",
                  "err": {},
                  "uuid": "4bb0ba68-2030-442f-9376-c86cb16b9a44",
                  "parentUUID": "8d620b27-4b07-437b-87a4-aa178a1f0556",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a3e5eee4-e261-48c1-8e84-8f16ff6c74c4",
                "71afdb97-a115-427e-aaec-bb5728f2c3f6",
                "4bb0ba68-2030-442f-9376-c86cb16b9a44"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 105,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bba533c2-7b85-4e1b-bfb2-d7ae40d8711b",
              "title": "Transactions",
              "fullFile": "D:\\JCO\\main\\test\\1_Fundraising_test.js",
              "file": "\\test\\1_Fundraising_test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should submit transaction successfully",
                  "fullTitle": "Fundraising Contract Transactions Should submit transaction successfully",
                  "timedOut": false,
                  "duration": 99,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tx = await jco_manager.submitTxn_Fund(account1.address, 100, \"0x\");\nawait tx.wait();\nexpect(tx)\n    .to.emit(fundraising, \"SubmitTransaction\")\n    .withArgs(owner.address, 0, account1.address, 100, \"0x\");",
                  "err": {},
                  "uuid": "aa7a6e77-b1dd-4b7e-a7fa-a1c82a69ba5a",
                  "parentUUID": "bba533c2-7b85-4e1b-bfb2-d7ae40d8711b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should confirm transaction successfully",
                  "fullTitle": "Fundraising Contract Transactions Should confirm transaction successfully",
                  "timedOut": false,
                  "duration": 144,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await jco_manager.submitTxn_Fund(account1.address, 100, \"0x\");\nconst tx = await jco_manager.confirmTxn_Fund(0);\nawait tx.wait();\nexpect(tx).to.emit(fundraising, \"ConfirmTransaction\").withArgs(account1.address, 0);",
                  "err": {},
                  "uuid": "1cfc7efc-cee6-4610-a784-8f2f5148d190",
                  "parentUUID": "bba533c2-7b85-4e1b-bfb2-d7ae40d8711b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should execute transaction successfully",
                  "fullTitle": "Fundraising Contract Transactions Should execute transaction successfully",
                  "timedOut": false,
                  "duration": 813,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let tx = await treasury.approveOtherContract(jco.address, multisig.address, 250000000);\nawait tx.wait();\ntx = await jco_manager.connect(account1).confirmTxn_TGW(fundraising.address, 0);\nawait tx.wait();\ntx = await jco_manager.connect(owner).confirmTxn_TGW(fundraising.address, 0);\nawait tx.wait();\ntx = await jco_manager.connect(account2).confirmTxn_TGW(fundraising.address, 0);\nawait tx.wait();\ntx = await jco_manager.executeTxn_TGW(fundraising.address, 0);\nawait tx.wait();\ntx = await jco_manager.submitTxn_Fund(account1.address, 100, \"0x\");\nawait tx.wait();\ntx = await jco_manager.connect(owner).confirmTxn_Fund(0);\nawait tx.wait();\ntx = await jco_manager.connect(account1).confirmTxn_Fund(0);\nawait tx.wait();\ntx = await jco_manager.executeTxn_Fund(0);\nawait tx.wait();\nexpect(tx).to.emit(fundraising, \"Transfer_JCO\").withArgs(fundraising.address, account1.address, 100);\nexpect(tx).to.emit(fundraising, \"ExecuteTransaction\").withArgs(owner.address, 0);",
                  "err": {},
                  "uuid": "dd30f74f-f0ae-44fc-b79b-0c72750b0c50",
                  "parentUUID": "bba533c2-7b85-4e1b-bfb2-d7ae40d8711b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should revoke confirmation successfully",
                  "fullTitle": "Fundraising Contract Transactions Should revoke confirmation successfully",
                  "timedOut": false,
                  "duration": 250,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await jco_manager.submitTxn_Fund(account1.address, 100, \"0x\");\nawait jco_manager.connect(account1).confirmTxn_Fund(0);\nconst tx = await jco_manager.connect(account1).revokeConfirmation_Fund(0);\nawait tx.wait();\nexpect(tx).to.emit(fundraising, \"RevokeConfirmation\").withArgs(account1.address, 0);",
                  "err": {},
                  "uuid": "40bd3ae4-4fdc-4958-8fec-cc88ff57f770",
                  "parentUUID": "bba533c2-7b85-4e1b-bfb2-d7ae40d8711b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should not execute transaction without minimum confirmations",
                  "fullTitle": "Fundraising Contract Transactions Should not execute transaction without minimum confirmations",
                  "timedOut": false,
                  "duration": 561,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await treasury.approveOtherContract(jco.address, multisig.address, 250000000);\nawait jco_manager.connect(account1).confirmTxn_TGW(staking.address, 0);\nawait jco_manager.connect(owner).confirmTxn_TGW(staking.address, 0);\nawait jco_manager.connect(account2).confirmTxn_TGW(staking.address, 0);\nawait jco_manager.executeTxn_TGW(staking.address, 0);\nawait jco_manager.submitTxn_Fund(account1.address, 10000, \"0x\");\nawait jco_manager.connect(account1).confirmTxn_Fund(0);\nawait expect(jco_manager.executeTxn_Fund(0)).to.be.rejectedWith(\"cannot execute tx\");",
                  "err": {},
                  "uuid": "97068d4e-546e-4bab-be00-80073b0b8dc1",
                  "parentUUID": "bba533c2-7b85-4e1b-bfb2-d7ae40d8711b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "aa7a6e77-b1dd-4b7e-a7fa-a1c82a69ba5a",
                "1cfc7efc-cee6-4610-a784-8f2f5148d190",
                "dd30f74f-f0ae-44fc-b79b-0c72750b0c50",
                "40bd3ae4-4fdc-4958-8fec-cc88ff57f770",
                "97068d4e-546e-4bab-be00-80073b0b8dc1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1867,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "200f91aa-e1ee-427d-83a1-ecc7bc9fe812",
          "title": "Rewards Contract",
          "fullFile": "D:\\JCO\\main\\test\\2_Rewards_test.js",
          "file": "\\test\\2_Rewards_test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Rewards Contract\"",
              "fullTitle": "Rewards Contract \"before each\" hook in \"Rewards Contract\"",
              "timedOut": false,
              "duration": 1526,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "[owner, account1, account2, account3] = await ethers.getSigners();\naccounts = [owner.address, account1.address, account2.address];\nTreasury = await ethers.getContractFactory(\"Treasury\");\ntreasury = await Treasury.deploy();\nJCO = await ethers.getContractFactory(\"JCO\");\njco = await JCO.deploy(treasury.address, \"JCO_Ganache\", \"JCO\");\nJCO_Manager = await ethers.getContractFactory(\"JCO_Manager\");\njco_manager = await JCO_Manager.deploy(jco.address);\nFundraising = await ethers.getContractFactory(\"Fundraising\");\nfundraising = await Fundraising.deploy(accounts, 2, jco.address, jco_manager.address);\nRewards = await ethers.getContractFactory(\"Rewards\");\nrewards = await Rewards.deploy(accounts, 2, jco.address, jco_manager.address);\nTeam = await ethers.getContractFactory(\"Team\");\nteam = await Team.deploy(accounts, 2, jco.address, jco_manager.address);\nAdvisors = await ethers.getContractFactory(\"Advisors\");\nadvisors = await Advisors.deploy(accounts, 2, jco.address, jco_manager.address);\nMarketing = await ethers.getContractFactory(\"Marketing\");\nmarketing = await Marketing.deploy(accounts, 2, jco.address, jco_manager.address);\nExchange = await ethers.getContractFactory(\"Exchange\");\nexchange = await Exchange.deploy(accounts, 2, jco.address, jco_manager.address);\nFoundation = await ethers.getContractFactory(\"Foundation\");\nfoundation = await Foundation.deploy(accounts, 2, jco.address, jco_manager.address);\nStaking = await ethers.getContractFactory(\"Staking\");\nstaking = await Staking.deploy(accounts, 2, jco.address, jco_manager.address);\nMultiSig_Treasury = await ethers.getContractFactory(\"MultiSig_Treasury\");\nmultisig = await MultiSig_Treasury.deploy(accounts, 2, jco.address, treasury.address, jco_manager.address, [\n    fundraising.address,\n    rewards.address,\n    team.address,\n    advisors.address,\n    marketing.address,\n    exchange.address,\n    foundation.address,\n    staking.address,\n]);\nawait jco_manager.addWallets(\n    treasury.address,\n    multisig.address,\n    fundraising.address,\n    rewards.address,\n    team.address,\n    advisors.address,\n    marketing.address,\n    exchange.address,\n    foundation.address,\n    staking.address\n);",
              "err": {},
              "uuid": "9b19c38d-94e4-497f-b9b0-a2f06bbdc4d7",
              "parentUUID": "200f91aa-e1ee-427d-83a1-ecc7bc9fe812",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d3d20cd8-e296-4f15-bd74-64a19ffc8678",
              "title": "Deployment",
              "fullFile": "D:\\JCO\\main\\test\\2_Rewards_test.js",
              "file": "\\test\\2_Rewards_test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should assign the manager",
                  "fullTitle": "Rewards Contract Deployment Should assign the manager",
                  "timedOut": false,
                  "duration": 37,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(await rewards.manager()).to.equal(jco_manager.address);",
                  "err": {},
                  "uuid": "f91cb7ef-0e76-4558-bfd9-057a0b24f7af",
                  "parentUUID": "d3d20cd8-e296-4f15-bd74-64a19ffc8678",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should set the number of confirmations required",
                  "fullTitle": "Rewards Contract Deployment Should set the number of confirmations required",
                  "timedOut": false,
                  "duration": 37,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(await rewards.numConfirmationsRequired()).to.equal(2);",
                  "err": {},
                  "uuid": "d535a038-69a5-4800-8aed-68ca3fc374e1",
                  "parentUUID": "d3d20cd8-e296-4f15-bd74-64a19ffc8678",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should set the owners",
                  "fullTitle": "Rewards Contract Deployment Should set the owners",
                  "timedOut": false,
                  "duration": 25,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(await jco_manager.getOwners_OW()).to.eql(accounts);",
                  "err": {},
                  "uuid": "65055ec9-95bb-41e8-9b97-b4086df075bc",
                  "parentUUID": "d3d20cd8-e296-4f15-bd74-64a19ffc8678",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f91cb7ef-0e76-4558-bfd9-057a0b24f7af",
                "d535a038-69a5-4800-8aed-68ca3fc374e1",
                "65055ec9-95bb-41e8-9b97-b4086df075bc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 99,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c5d75e84-ae82-41ce-8090-894b24694453",
              "title": "Transactions",
              "fullFile": "D:\\JCO\\main\\test\\2_Rewards_test.js",
              "file": "\\test\\2_Rewards_test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should submit transaction successfully",
                  "fullTitle": "Rewards Contract Transactions Should submit transaction successfully",
                  "timedOut": false,
                  "duration": 110,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tx = await jco_manager.submitTxn_Rewards(account1.address, 100, \"0x\");\nawait tx.wait();\nexpect(tx).to.emit(rewards, \"SubmitTransaction\").withArgs(owner.address, 0, account1.address, 100, \"0x\");",
                  "err": {},
                  "uuid": "97b13182-9e9c-4c2b-84ce-8954e06356b8",
                  "parentUUID": "c5d75e84-ae82-41ce-8090-894b24694453",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should confirm transaction successfully",
                  "fullTitle": "Rewards Contract Transactions Should confirm transaction successfully",
                  "timedOut": false,
                  "duration": 155,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await jco_manager.submitTxn_Rewards(account1.address, 100, \"0x\");\nconst tx = await jco_manager.confirmTxn_Rewards(0);\nawait tx.wait();\nexpect(tx).to.emit(rewards, \"ConfirmTransaction\").withArgs(account1.address, 0);",
                  "err": {},
                  "uuid": "702300da-516c-4369-b012-48fe34081103",
                  "parentUUID": "c5d75e84-ae82-41ce-8090-894b24694453",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should execute transaction successfully",
                  "fullTitle": "Rewards Contract Transactions Should execute transaction successfully",
                  "timedOut": false,
                  "duration": 905,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let tx = await treasury.approveOtherContract(jco.address, multisig.address, 250000000);\nawait tx.wait();\ntx = await jco_manager.connect(account1).confirmTxn_TGW(rewards.address, 0);\nawait tx.wait();\ntx = await jco_manager.connect(owner).confirmTxn_TGW(rewards.address, 0);\nawait tx.wait();\ntx = await jco_manager.connect(account2).confirmTxn_TGW(rewards.address, 0);\nawait tx.wait();\ntx = await jco_manager.executeTxn_TGW(rewards.address, 0);\nawait tx.wait();\ntx = await jco_manager.submitTxn_Rewards(account1.address, 100, \"0x\");\nawait tx.wait();\ntx = await jco_manager.connect(owner).confirmTxn_Rewards(0);\nawait tx.wait();\ntx = await jco_manager.connect(account1).confirmTxn_Rewards(0);\nawait tx.wait();\ntx = await jco_manager.executeTxn_Rewards(0);\nawait tx.wait();\nexpect(tx).to.emit(rewards, \"Transfer_JCO\").withArgs(rewards.address, account1.address, 100);\nexpect(tx).to.emit(rewards, \"ExecuteTransaction\").withArgs(owner.address, 0);",
                  "err": {},
                  "uuid": "8971fc6b-0070-4f35-b73e-484fd03ed8f2",
                  "parentUUID": "c5d75e84-ae82-41ce-8090-894b24694453",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should revoke confirmation successfully",
                  "fullTitle": "Rewards Contract Transactions Should revoke confirmation successfully",
                  "timedOut": false,
                  "duration": 233,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await jco_manager.submitTxn_Rewards(account1.address, 100, \"0x\");\nawait jco_manager.connect(account1).confirmTxn_Rewards(0);\nconst tx = await jco_manager.connect(account1).revokeConfirmation_Rewards(0);\nawait tx.wait();\nexpect(tx).to.emit(rewards, \"RevokeConfirmation\").withArgs(account1.address, 0);",
                  "err": {},
                  "uuid": "7b805d0f-2fc4-4813-bf6f-c16f69c68487",
                  "parentUUID": "c5d75e84-ae82-41ce-8090-894b24694453",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should not execute transaction without minimum confirmations",
                  "fullTitle": "Rewards Contract Transactions Should not execute transaction without minimum confirmations",
                  "timedOut": false,
                  "duration": 605,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await treasury.approveOtherContract(jco.address, multisig.address, 250000000);\nawait jco_manager.connect(account1).confirmTxn_TGW(staking.address, 0);\nawait jco_manager.connect(owner).confirmTxn_TGW(staking.address, 0);\nawait jco_manager.connect(account2).confirmTxn_TGW(staking.address, 0);\nawait jco_manager.executeTxn_TGW(staking.address, 0);\nawait jco_manager.submitTxn_Rewards(account1.address, 10000, \"0x\");\nawait jco_manager.connect(account1).confirmTxn_Rewards(0);\nawait expect(jco_manager.executeTxn_Rewards(0)).to.be.rejectedWith(\"cannot execute tx\");",
                  "err": {},
                  "uuid": "b614fbb8-7560-4f3c-a3b3-d81a05b6f6c3",
                  "parentUUID": "c5d75e84-ae82-41ce-8090-894b24694453",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "97b13182-9e9c-4c2b-84ce-8954e06356b8",
                "702300da-516c-4369-b012-48fe34081103",
                "8971fc6b-0070-4f35-b73e-484fd03ed8f2",
                "7b805d0f-2fc4-4813-bf6f-c16f69c68487",
                "b614fbb8-7560-4f3c-a3b3-d81a05b6f6c3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2008,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f8e70da9-ca7d-4e77-b170-9cec511c8684",
          "title": "Team Contract",
          "fullFile": "D:\\JCO\\main\\test\\3_Team_test.js",
          "file": "\\test\\3_Team_test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Team Contract\"",
              "fullTitle": "Team Contract \"before each\" hook in \"Team Contract\"",
              "timedOut": false,
              "duration": 1545,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "[owner, account1, account2, account3] = await ethers.getSigners();\naccounts = [owner.address, account1.address, account2.address];\nTreasury = await ethers.getContractFactory(\"Treasury\");\ntreasury = await Treasury.deploy();\nJCO = await ethers.getContractFactory(\"JCO\");\njco = await JCO.deploy(treasury.address, \"JCO_Ganache\", \"JCO\");\nJCO_Manager = await ethers.getContractFactory(\"JCO_Manager\");\njco_manager = await JCO_Manager.deploy(jco.address);\nFundraising = await ethers.getContractFactory(\"Fundraising\");\nfundraising = await Fundraising.deploy(accounts, 2, jco.address, jco_manager.address);\nRewards = await ethers.getContractFactory(\"Rewards\");\nrewards = await Rewards.deploy(accounts, 2, jco.address, jco_manager.address);\nTeam = await ethers.getContractFactory(\"Team\");\nteam = await Team.deploy(accounts, 2, jco.address, jco_manager.address);\nAdvisors = await ethers.getContractFactory(\"Advisors\");\nadvisors = await Advisors.deploy(accounts, 2, jco.address, jco_manager.address);\nMarketing = await ethers.getContractFactory(\"Marketing\");\nmarketing = await Marketing.deploy(accounts, 2, jco.address, jco_manager.address);\nExchange = await ethers.getContractFactory(\"Exchange\");\nexchange = await Exchange.deploy(accounts, 2, jco.address, jco_manager.address);\nFoundation = await ethers.getContractFactory(\"Foundation\");\nfoundation = await Foundation.deploy(accounts, 2, jco.address, jco_manager.address);\nStaking = await ethers.getContractFactory(\"Staking\");\nstaking = await Staking.deploy(accounts, 2, jco.address, jco_manager.address);\nMultiSig_Treasury = await ethers.getContractFactory(\"MultiSig_Treasury\");\nmultisig = await MultiSig_Treasury.deploy(accounts, 2, jco.address, treasury.address, jco_manager.address, [\n    fundraising.address,\n    rewards.address,\n    team.address,\n    advisors.address,\n    marketing.address,\n    exchange.address,\n    foundation.address,\n    staking.address,\n]);\nawait jco_manager.addWallets(\n    treasury.address,\n    multisig.address,\n    fundraising.address,\n    rewards.address,\n    team.address,\n    advisors.address,\n    marketing.address,\n    exchange.address,\n    foundation.address,\n    staking.address\n);",
              "err": {},
              "uuid": "f099e5d9-12a1-482a-8e45-e923d0662ff2",
              "parentUUID": "f8e70da9-ca7d-4e77-b170-9cec511c8684",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "83f9125d-6d73-407b-ac1b-c7da665c8801",
              "title": "Deployment",
              "fullFile": "D:\\JCO\\main\\test\\3_Team_test.js",
              "file": "\\test\\3_Team_test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should assign the manager",
                  "fullTitle": "Team Contract Deployment Should assign the manager",
                  "timedOut": false,
                  "duration": 36,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(await team.manager()).to.equal(jco_manager.address);",
                  "err": {},
                  "uuid": "a4ac51cf-f743-4b45-80c4-c6a55fe70edc",
                  "parentUUID": "83f9125d-6d73-407b-ac1b-c7da665c8801",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should set the number of confirmations required",
                  "fullTitle": "Team Contract Deployment Should set the number of confirmations required",
                  "timedOut": false,
                  "duration": 38,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(await team.numConfirmationsRequired()).to.equal(2);",
                  "err": {},
                  "uuid": "8d286363-5294-4bed-94c0-ae68aa6427bb",
                  "parentUUID": "83f9125d-6d73-407b-ac1b-c7da665c8801",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should set the owners",
                  "fullTitle": "Team Contract Deployment Should set the owners",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(await jco_manager.getOwners_OW()).to.eql(accounts);",
                  "err": {},
                  "uuid": "b9e30210-2d72-4c52-a25c-482a084c4d02",
                  "parentUUID": "83f9125d-6d73-407b-ac1b-c7da665c8801",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a4ac51cf-f743-4b45-80c4-c6a55fe70edc",
                "8d286363-5294-4bed-94c0-ae68aa6427bb",
                "b9e30210-2d72-4c52-a25c-482a084c4d02"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 95,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "51c7a105-1739-4c62-84fd-73a77e9842ca",
              "title": "Transactions",
              "fullFile": "D:\\JCO\\main\\test\\3_Team_test.js",
              "file": "\\test\\3_Team_test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should submit transaction successfully",
                  "fullTitle": "Team Contract Transactions Should submit transaction successfully",
                  "timedOut": false,
                  "duration": 81,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tx = await jco_manager.submitTxn_Team(account1.address, 100, \"0x\");\nawait tx.wait();\nexpect(tx).to.emit(team, \"SubmitTransaction\").withArgs(owner.address, 0, account1.address, 100, \"0x\");",
                  "err": {},
                  "uuid": "a16aa41a-fd29-4e6f-987b-ad243b0da8cd",
                  "parentUUID": "51c7a105-1739-4c62-84fd-73a77e9842ca",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should confirm transaction successfully",
                  "fullTitle": "Team Contract Transactions Should confirm transaction successfully",
                  "timedOut": false,
                  "duration": 155,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await jco_manager.submitTxn_Team(account1.address, 100, \"0x\");\nconst tx = await jco_manager.confirmTxn_Team(0);\nawait tx.wait();\nexpect(tx).to.emit(team, \"ConfirmTransaction\").withArgs(account1.address, 0);",
                  "err": {},
                  "uuid": "5034d3f5-28c6-4631-b836-3516f6b40224",
                  "parentUUID": "51c7a105-1739-4c62-84fd-73a77e9842ca",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should revoke confirmation successfully",
                  "fullTitle": "Team Contract Transactions Should revoke confirmation successfully",
                  "timedOut": false,
                  "duration": 283,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await jco_manager.submitTxn_Team(account1.address, 100, \"0x\");\nawait jco_manager.connect(account1).confirmTxn_Team(0);\nconst tx = await jco_manager.connect(account1).revokeConfirmation_Team(0);\nawait tx.wait();\nexpect(tx).to.emit(team, \"RevokeConfirmation\").withArgs(account1.address, 0);",
                  "err": {},
                  "uuid": "7bce45a6-e48d-4f96-a355-382daf65c169",
                  "parentUUID": "51c7a105-1739-4c62-84fd-73a77e9842ca",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a16aa41a-fd29-4e6f-987b-ad243b0da8cd",
                "5034d3f5-28c6-4631-b836-3516f6b40224",
                "7bce45a6-e48d-4f96-a355-382daf65c169"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 519,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a52eb911-ec98-4fac-9755-9dbb20069b16",
          "title": "Advisors Contract",
          "fullFile": "D:\\JCO\\main\\test\\4_Advisors_test.js",
          "file": "\\test\\4_Advisors_test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Advisors Contract\"",
              "fullTitle": "Advisors Contract \"before each\" hook in \"Advisors Contract\"",
              "timedOut": false,
              "duration": 1838,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "[owner, account1, account2, account3] = await ethers.getSigners();\naccounts = [owner.address, account1.address, account2.address];\nTreasury = await ethers.getContractFactory(\"Treasury\");\ntreasury = await Treasury.deploy();\nJCO = await ethers.getContractFactory(\"JCO\");\njco = await JCO.deploy(treasury.address, \"JCO_Ganache\", \"JCO\");\nJCO_Manager = await ethers.getContractFactory(\"JCO_Manager\");\njco_manager = await JCO_Manager.deploy(jco.address);\nFundraising = await ethers.getContractFactory(\"Fundraising\");\nfundraising = await Fundraising.deploy(accounts, 2, jco.address, jco_manager.address);\nRewards = await ethers.getContractFactory(\"Rewards\");\nrewards = await Rewards.deploy(accounts, 2, jco.address, jco_manager.address);\nTeam = await ethers.getContractFactory(\"Team\");\nteam = await Team.deploy(accounts, 2, jco.address, jco_manager.address);\nAdvisors = await ethers.getContractFactory(\"Advisors\");\nadvisors = await Advisors.deploy(accounts, 2, jco.address, jco_manager.address);\nMarketing = await ethers.getContractFactory(\"Marketing\");\nmarketing = await Marketing.deploy(accounts, 2, jco.address, jco_manager.address);\nExchange = await ethers.getContractFactory(\"Exchange\");\nexchange = await Exchange.deploy(accounts, 2, jco.address, jco_manager.address);\nFoundation = await ethers.getContractFactory(\"Foundation\");\nfoundation = await Foundation.deploy(accounts, 2, jco.address, jco_manager.address);\nStaking = await ethers.getContractFactory(\"Staking\");\nstaking = await Staking.deploy(accounts, 2, jco.address, jco_manager.address);\nMultiSig_Treasury = await ethers.getContractFactory(\"MultiSig_Treasury\");\nmultisig = await MultiSig_Treasury.deploy(accounts, 2, jco.address, treasury.address, jco_manager.address, [\n    fundraising.address,\n    rewards.address,\n    team.address,\n    advisors.address,\n    marketing.address,\n    exchange.address,\n    foundation.address,\n    staking.address,\n]);\nawait jco_manager.addWallets(\n    treasury.address,\n    multisig.address,\n    fundraising.address,\n    rewards.address,\n    team.address,\n    advisors.address,\n    marketing.address,\n    exchange.address,\n    foundation.address,\n    staking.address\n);",
              "err": {},
              "uuid": "db7a7d69-dea7-41e1-bfd5-2792b25fe386",
              "parentUUID": "a52eb911-ec98-4fac-9755-9dbb20069b16",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "213300e7-4406-4a99-9401-f4d64cff0421",
              "title": "Deployment",
              "fullFile": "D:\\JCO\\main\\test\\4_Advisors_test.js",
              "file": "\\test\\4_Advisors_test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should assign the manager",
                  "fullTitle": "Advisors Contract Deployment Should assign the manager",
                  "timedOut": false,
                  "duration": 38,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(await advisors.manager()).to.equal(jco_manager.address);",
                  "err": {},
                  "uuid": "543089e7-4957-4d4a-906b-87e6611f6792",
                  "parentUUID": "213300e7-4406-4a99-9401-f4d64cff0421",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should set the number of confirmations required",
                  "fullTitle": "Advisors Contract Deployment Should set the number of confirmations required",
                  "timedOut": false,
                  "duration": 35,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(await advisors.numConfirmationsRequired()).to.equal(2);",
                  "err": {},
                  "uuid": "74c1b1a7-7c57-46d6-8a9a-f03b452b443c",
                  "parentUUID": "213300e7-4406-4a99-9401-f4d64cff0421",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should set the owners",
                  "fullTitle": "Advisors Contract Deployment Should set the owners",
                  "timedOut": false,
                  "duration": 29,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(await jco_manager.getOwners_OW()).to.eql(accounts);",
                  "err": {},
                  "uuid": "17717b86-dd08-440f-9c1e-3f41835039cf",
                  "parentUUID": "213300e7-4406-4a99-9401-f4d64cff0421",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "543089e7-4957-4d4a-906b-87e6611f6792",
                "74c1b1a7-7c57-46d6-8a9a-f03b452b443c",
                "17717b86-dd08-440f-9c1e-3f41835039cf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 102,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "83b25ef0-4e1e-4637-9842-7a2dc0ee2a86",
              "title": "Transactions",
              "fullFile": "D:\\JCO\\main\\test\\4_Advisors_test.js",
              "file": "\\test\\4_Advisors_test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should submit transaction successfully",
                  "fullTitle": "Advisors Contract Transactions Should submit transaction successfully",
                  "timedOut": false,
                  "duration": 83,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tx = await jco_manager.submitTxn_Advisor(account1.address, 100, \"0x\");\nawait tx.wait();\nexpect(tx).to.emit(advisors, \"SubmitTransaction\").withArgs(owner.address, 0, account1.address, 100, \"0x\");",
                  "err": {},
                  "uuid": "9e61bff1-b537-4f88-b131-7d7e37024e2c",
                  "parentUUID": "83b25ef0-4e1e-4637-9842-7a2dc0ee2a86",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should confirm transaction successfully",
                  "fullTitle": "Advisors Contract Transactions Should confirm transaction successfully",
                  "timedOut": false,
                  "duration": 143,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await jco_manager.submitTxn_Advisor(account1.address, 100, \"0x\");\nconst tx = await jco_manager.confirmTxn_Advisor(0);\nawait tx.wait();\nexpect(tx).to.emit(advisors, \"ConfirmTransaction\").withArgs(account1.address, 0);",
                  "err": {},
                  "uuid": "575c4d9b-b621-4c23-876c-a4a8c747f189",
                  "parentUUID": "83b25ef0-4e1e-4637-9842-7a2dc0ee2a86",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should revoke confirmation successfully",
                  "fullTitle": "Advisors Contract Transactions Should revoke confirmation successfully",
                  "timedOut": false,
                  "duration": 234,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await jco_manager.submitTxn_Advisor(account1.address, 100, \"0x\");\nawait jco_manager.connect(account1).confirmTxn_Advisor(0);\nconst tx = await jco_manager.connect(account1).revokeConfirmation_Advisor(0);\nawait tx.wait();\nexpect(tx).to.emit(advisors, \"RevokeConfirmation\").withArgs(account1.address, 0);",
                  "err": {},
                  "uuid": "1f740e01-15b4-4677-a5c6-4345d0a9652f",
                  "parentUUID": "83b25ef0-4e1e-4637-9842-7a2dc0ee2a86",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9e61bff1-b537-4f88-b131-7d7e37024e2c",
                "575c4d9b-b621-4c23-876c-a4a8c747f189",
                "1f740e01-15b4-4677-a5c6-4345d0a9652f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 460,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "8ebdcd6d-4629-4b69-8da3-2ba4c2698d55",
          "title": "Marketing Contract",
          "fullFile": "D:\\JCO\\main\\test\\5_Marketing_test.js",
          "file": "\\test\\5_Marketing_test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Marketing Contract\"",
              "fullTitle": "Marketing Contract \"before each\" hook in \"Marketing Contract\"",
              "timedOut": false,
              "duration": 1522,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(10000);\n[owner, account1, account2, account3] = await ethers.getSigners();\naccounts = [owner.address, account1.address, account2.address];\nTreasury = await ethers.getContractFactory(\"Treasury\");\ntreasury = await Treasury.deploy();\nJCO = await ethers.getContractFactory(\"JCO\");\njco = await JCO.deploy(treasury.address, \"JCO_Ganache\", \"JCO\");\nJCO_Manager = await ethers.getContractFactory(\"JCO_Manager\");\njco_manager = await JCO_Manager.deploy(jco.address);\nFundraising = await ethers.getContractFactory(\"Fundraising\");\nfundraising = await Fundraising.deploy(accounts, 2, jco.address, jco_manager.address);\nRewards = await ethers.getContractFactory(\"Rewards\");\nrewards = await Rewards.deploy(accounts, 2, jco.address, jco_manager.address);\nTeam = await ethers.getContractFactory(\"Team\");\nteam = await Team.deploy(accounts, 2, jco.address, jco_manager.address);\nAdvisors = await ethers.getContractFactory(\"Advisors\");\nadvisors = await Advisors.deploy(accounts, 2, jco.address, jco_manager.address);\nMarketing = await ethers.getContractFactory(\"Marketing\");\nmarketing = await Marketing.deploy(accounts, 2, jco.address, jco_manager.address);\nExchange = await ethers.getContractFactory(\"Exchange\");\nexchange = await Exchange.deploy(accounts, 2, jco.address, jco_manager.address);\nFoundation = await ethers.getContractFactory(\"Foundation\");\nfoundation = await Foundation.deploy(accounts, 2, jco.address, jco_manager.address);\nStaking = await ethers.getContractFactory(\"Staking\");\nstaking = await Staking.deploy(accounts, 2, jco.address, jco_manager.address);\nMultiSig_Treasury = await ethers.getContractFactory(\"MultiSig_Treasury\");\nmultisig = await MultiSig_Treasury.deploy(accounts, 2, jco.address, treasury.address, jco_manager.address, [\n    fundraising.address,\n    rewards.address,\n    team.address,\n    advisors.address,\n    marketing.address,\n    exchange.address,\n    foundation.address,\n    staking.address,\n]);\nawait jco_manager.addWallets(\n    treasury.address,\n    multisig.address,\n    fundraising.address,\n    rewards.address,\n    team.address,\n    advisors.address,\n    marketing.address,\n    exchange.address,\n    foundation.address,\n    staking.address\n);",
              "err": {},
              "uuid": "067c8ffa-9559-482f-949e-79101837c240",
              "parentUUID": "8ebdcd6d-4629-4b69-8da3-2ba4c2698d55",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "23fd6423-ff20-4389-9b1d-7d6ba29e1a8d",
              "title": "Deployment",
              "fullFile": "D:\\JCO\\main\\test\\5_Marketing_test.js",
              "file": "\\test\\5_Marketing_test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should assign the manager",
                  "fullTitle": "Marketing Contract Deployment Should assign the manager",
                  "timedOut": false,
                  "duration": 36,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(await marketing.manager()).to.equal(jco_manager.address);",
                  "err": {},
                  "uuid": "b5d30e01-4012-46ad-bd72-4e2e82fe0854",
                  "parentUUID": "23fd6423-ff20-4389-9b1d-7d6ba29e1a8d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should set the number of confirmations required",
                  "fullTitle": "Marketing Contract Deployment Should set the number of confirmations required",
                  "timedOut": false,
                  "duration": 36,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(await marketing.numConfirmationsRequired()).to.equal(2);",
                  "err": {},
                  "uuid": "34186d9b-1e9f-4024-86c6-cc5773f12fee",
                  "parentUUID": "23fd6423-ff20-4389-9b1d-7d6ba29e1a8d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should set the owners",
                  "fullTitle": "Marketing Contract Deployment Should set the owners",
                  "timedOut": false,
                  "duration": 25,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(await jco_manager.getOwners_OW()).to.eql(accounts);",
                  "err": {},
                  "uuid": "c3a1fb87-a8cc-45d0-a76e-598951583d9c",
                  "parentUUID": "23fd6423-ff20-4389-9b1d-7d6ba29e1a8d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b5d30e01-4012-46ad-bd72-4e2e82fe0854",
                "34186d9b-1e9f-4024-86c6-cc5773f12fee",
                "c3a1fb87-a8cc-45d0-a76e-598951583d9c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 97,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b71747e3-b068-4fd5-a1ce-827b932d4989",
              "title": "Transactions",
              "fullFile": "D:\\JCO\\main\\test\\5_Marketing_test.js",
              "file": "\\test\\5_Marketing_test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should submit transaction successfully",
                  "fullTitle": "Marketing Contract Transactions Should submit transaction successfully",
                  "timedOut": false,
                  "duration": 127,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tx = await jco_manager.submitTxn_Marketing(account1.address, 100, \"0x\");\nawait tx.wait();\nexpect(tx).to.emit(marketing, \"SubmitTransaction\").withArgs(owner.address, 0, account1.address, 100, \"0x\");",
                  "err": {},
                  "uuid": "3bc12708-2620-46a6-b2f9-770b2ce13239",
                  "parentUUID": "b71747e3-b068-4fd5-a1ce-827b932d4989",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should confirm transaction successfully",
                  "fullTitle": "Marketing Contract Transactions Should confirm transaction successfully",
                  "timedOut": false,
                  "duration": 126,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await jco_manager.submitTxn_Marketing(account1.address, 100, \"0x\");\nconst tx = await jco_manager.confirmTxn_Marketing(0);\nawait tx.wait();\nexpect(tx).to.emit(marketing, \"ConfirmTransaction\").withArgs(account1.address, 0);",
                  "err": {},
                  "uuid": "9a425ada-0b55-4ee0-8a31-9315ecdb5cc9",
                  "parentUUID": "b71747e3-b068-4fd5-a1ce-827b932d4989",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should execute transaction successfully",
                  "fullTitle": "Marketing Contract Transactions Should execute transaction successfully",
                  "timedOut": false,
                  "duration": 966,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let tx = await treasury.approveOtherContract(jco.address, multisig.address, 250000000);\nawait tx.wait();\ntx = await jco_manager.connect(account1).confirmTxn_TGW(marketing.address, 0);\nawait tx.wait();\ntx = await jco_manager.connect(owner).confirmTxn_TGW(marketing.address, 0);\nawait tx.wait();\ntx = await jco_manager.connect(account2).confirmTxn_TGW(marketing.address, 0);\nawait tx.wait();\ntx = await jco_manager.executeTxn_TGW(marketing.address, 0);\nawait tx.wait();\ntx = await jco_manager.submitTxn_Marketing(account1.address, 100, \"0x\");\nawait tx.wait();\ntx = await jco_manager.connect(owner).confirmTxn_Marketing(0);\nawait tx.wait();\ntx = await jco_manager.connect(account1).confirmTxn_Marketing(0);\nawait tx.wait();\ntx = await jco_manager.executeTxn_Marketing(0);\nawait tx.wait();\nexpect(tx).to.emit(marketing, \"Transfer_JCO\").withArgs(marketing.address, account1.address, 100);\nexpect(tx).to.emit(marketing, \"ExecuteTransaction\").withArgs(owner.address, 0);",
                  "err": {},
                  "uuid": "de3c556f-f00c-4f48-820c-e7e066c6de9f",
                  "parentUUID": "b71747e3-b068-4fd5-a1ce-827b932d4989",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should revoke confirmation successfully",
                  "fullTitle": "Marketing Contract Transactions Should revoke confirmation successfully",
                  "timedOut": false,
                  "duration": 251,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await jco_manager.submitTxn_Marketing(account1.address, 100, \"0x\");\nawait jco_manager.connect(account1).confirmTxn_Marketing(0);\nconst tx = await jco_manager.connect(account1).revokeConfirmation_Marketing(0);\nawait tx.wait();\nexpect(tx).to.emit(marketing, \"RevokeConfirmation\").withArgs(account1.address, 0);",
                  "err": {},
                  "uuid": "e51da367-8c7d-41f6-bd09-b800a2b2b728",
                  "parentUUID": "b71747e3-b068-4fd5-a1ce-827b932d4989",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should not execute transaction without minimum confirmations",
                  "fullTitle": "Marketing Contract Transactions Should not execute transaction without minimum confirmations",
                  "timedOut": false,
                  "duration": 600,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await treasury.approveOtherContract(jco.address, multisig.address, 250000000);\nawait jco_manager.connect(account1).confirmTxn_TGW(staking.address, 0);\nawait jco_manager.connect(owner).confirmTxn_TGW(staking.address, 0);\nawait jco_manager.connect(account2).confirmTxn_TGW(staking.address, 0);\nawait jco_manager.executeTxn_TGW(staking.address, 0);\nawait jco_manager.submitTxn_Marketing(account1.address, 10000, \"0x\");\nawait jco_manager.connect(account1).confirmTxn_Marketing(0);\nawait expect(jco_manager.executeTxn_Marketing(0)).to.be.rejectedWith(\"cannot execute tx\");",
                  "err": {},
                  "uuid": "fdd4c464-81e0-475f-ad15-108efab4a6d1",
                  "parentUUID": "b71747e3-b068-4fd5-a1ce-827b932d4989",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3bc12708-2620-46a6-b2f9-770b2ce13239",
                "9a425ada-0b55-4ee0-8a31-9315ecdb5cc9",
                "de3c556f-f00c-4f48-820c-e7e066c6de9f",
                "e51da367-8c7d-41f6-bd09-b800a2b2b728",
                "fdd4c464-81e0-475f-ad15-108efab4a6d1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2070,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1a02407f-f88f-4db7-91a7-d56adeec1f68",
          "title": "Exchange Contract",
          "fullFile": "D:\\JCO\\main\\test\\6_Exchange_test.js",
          "file": "\\test\\6_Exchange_test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Exchange Contract\"",
              "fullTitle": "Exchange Contract \"before each\" hook in \"Exchange Contract\"",
              "timedOut": false,
              "duration": 1702,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "[owner, account1, account2, account3] = await ethers.getSigners();\naccounts = [owner.address, account1.address, account2.address];\nTreasury = await ethers.getContractFactory(\"Treasury\");\ntreasury = await Treasury.deploy();\nJCO = await ethers.getContractFactory(\"JCO\");\njco = await JCO.deploy(treasury.address, \"JCO_Ganache\", \"JCO\");\nJCO_Manager = await ethers.getContractFactory(\"JCO_Manager\");\njco_manager = await JCO_Manager.deploy(jco.address);\nFundraising = await ethers.getContractFactory(\"Fundraising\");\nfundraising = await Fundraising.deploy(accounts, 2, jco.address, jco_manager.address);\nRewards = await ethers.getContractFactory(\"Rewards\");\nrewards = await Rewards.deploy(accounts, 2, jco.address, jco_manager.address);\nTeam = await ethers.getContractFactory(\"Team\");\nteam = await Team.deploy(accounts, 2, jco.address, jco_manager.address);\nAdvisors = await ethers.getContractFactory(\"Advisors\");\nadvisors = await Advisors.deploy(accounts, 2, jco.address, jco_manager.address);\nMarketing = await ethers.getContractFactory(\"Marketing\");\nmarketing = await Marketing.deploy(accounts, 2, jco.address, jco_manager.address);\nExchange = await ethers.getContractFactory(\"Exchange\");\nexchange = await Exchange.deploy(accounts, 2, jco.address, jco_manager.address);\nFoundation = await ethers.getContractFactory(\"Foundation\");\nfoundation = await Foundation.deploy(accounts, 2, jco.address, jco_manager.address);\nStaking = await ethers.getContractFactory(\"Staking\");\nstaking = await Staking.deploy(accounts, 2, jco.address, jco_manager.address);\nMultiSig_Treasury = await ethers.getContractFactory(\"MultiSig_Treasury\");\nmultisig = await MultiSig_Treasury.deploy(accounts, 2, jco.address, treasury.address, jco_manager.address, [\n    fundraising.address,\n    rewards.address,\n    team.address,\n    advisors.address,\n    marketing.address,\n    exchange.address,\n    foundation.address,\n    staking.address,\n]);\nawait jco_manager.addWallets(\n    treasury.address,\n    multisig.address,\n    fundraising.address,\n    rewards.address,\n    team.address,\n    advisors.address,\n    marketing.address,\n    exchange.address,\n    foundation.address,\n    staking.address\n);",
              "err": {},
              "uuid": "22be44d8-01ae-4c70-8492-7799486c0462",
              "parentUUID": "1a02407f-f88f-4db7-91a7-d56adeec1f68",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "1df77c71-9f05-4a38-a86e-162416767fcd",
              "title": "Deployment",
              "fullFile": "D:\\JCO\\main\\test\\6_Exchange_test.js",
              "file": "\\test\\6_Exchange_test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should assign the manager",
                  "fullTitle": "Exchange Contract Deployment Should assign the manager",
                  "timedOut": false,
                  "duration": 38,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(await exchange.manager()).to.equal(jco_manager.address);",
                  "err": {},
                  "uuid": "78723f03-dec6-4804-b14f-6bf44e0a933a",
                  "parentUUID": "1df77c71-9f05-4a38-a86e-162416767fcd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should set the number of confirmations required",
                  "fullTitle": "Exchange Contract Deployment Should set the number of confirmations required",
                  "timedOut": false,
                  "duration": 35,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(await exchange.numConfirmationsRequired()).to.equal(2);",
                  "err": {},
                  "uuid": "b0e7e5c7-5d18-434e-ab8e-653eba20478e",
                  "parentUUID": "1df77c71-9f05-4a38-a86e-162416767fcd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should set the owners",
                  "fullTitle": "Exchange Contract Deployment Should set the owners",
                  "timedOut": false,
                  "duration": 25,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(await jco_manager.getOwners_OW()).to.eql(accounts);",
                  "err": {},
                  "uuid": "6ab04596-bf10-46ff-9a14-19fa960fd576",
                  "parentUUID": "1df77c71-9f05-4a38-a86e-162416767fcd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "78723f03-dec6-4804-b14f-6bf44e0a933a",
                "b0e7e5c7-5d18-434e-ab8e-653eba20478e",
                "6ab04596-bf10-46ff-9a14-19fa960fd576"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 98,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "83721f42-36c2-4772-acf4-6bb780d83bf0",
              "title": "Transactions",
              "fullFile": "D:\\JCO\\main\\test\\6_Exchange_test.js",
              "file": "\\test\\6_Exchange_test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should submit transaction successfully",
                  "fullTitle": "Exchange Contract Transactions Should submit transaction successfully",
                  "timedOut": false,
                  "duration": 79,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tx = await jco_manager.submitTxn_Exchange(account1.address, 100, \"0x\");\nawait tx.wait();\nexpect(tx).to.emit(exchange, \"SubmitTransaction\").withArgs(owner.address, 0, account1.address, 100, \"0x\");",
                  "err": {},
                  "uuid": "03ffd7d5-b516-4d90-8df6-98bf0d06c46c",
                  "parentUUID": "83721f42-36c2-4772-acf4-6bb780d83bf0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should confirm transaction successfully",
                  "fullTitle": "Exchange Contract Transactions Should confirm transaction successfully",
                  "timedOut": false,
                  "duration": 131,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await jco_manager.submitTxn_Exchange(account1.address, 100, \"0x\");\nconst tx = await jco_manager.confirmTxn_Exchange(0);\nawait tx.wait();\nexpect(tx).to.emit(exchange, \"ConfirmTransaction\").withArgs(account1.address, 0);",
                  "err": {},
                  "uuid": "4b6ffd5d-c806-437c-a811-d3cdd1ecf38e",
                  "parentUUID": "83721f42-36c2-4772-acf4-6bb780d83bf0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should execute transaction successfully",
                  "fullTitle": "Exchange Contract Transactions Should execute transaction successfully",
                  "timedOut": false,
                  "duration": 826,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let tx = await treasury.approveOtherContract(jco.address, multisig.address, 250000000);\nawait tx.wait();\ntx = await jco_manager.connect(account1).confirmTxn_TGW(exchange.address, 0);\nawait tx.wait();\ntx = await jco_manager.connect(owner).confirmTxn_TGW(exchange.address, 0);\nawait tx.wait();\ntx = await jco_manager.connect(account2).confirmTxn_TGW(exchange.address, 0);\nawait tx.wait();\ntx = await jco_manager.executeTxn_TGW(exchange.address, 0);\nawait tx.wait();\ntx = await jco_manager.submitTxn_Exchange(account1.address, 100, \"0x\");\nawait tx.wait();\ntx = await jco_manager.connect(owner).confirmTxn_Exchange(0);\nawait tx.wait();\ntx = await jco_manager.connect(account1).confirmTxn_Exchange(0);\nawait tx.wait();\ntx = await jco_manager.executeTxn_Exchange(0);\nawait tx.wait();\nexpect(tx).to.emit(exchange, \"Transfer_JCO\").withArgs(exchange.address, account1.address, 100);\nexpect(tx).to.emit(exchange, \"ExecuteTransaction\").withArgs(owner.address, 0);",
                  "err": {},
                  "uuid": "415498df-962a-4765-9957-88f4fb436dca",
                  "parentUUID": "83721f42-36c2-4772-acf4-6bb780d83bf0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should revoke confirmation successfully",
                  "fullTitle": "Exchange Contract Transactions Should revoke confirmation successfully",
                  "timedOut": false,
                  "duration": 275,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await jco_manager.submitTxn_Exchange(account1.address, 100, \"0x\");\nawait jco_manager.connect(account1).confirmTxn_Exchange(0);\nconst tx = await jco_manager.connect(account1).revokeConfirmation_Exchange(0);\nawait tx.wait();\nexpect(tx).to.emit(exchange, \"RevokeConfirmation\").withArgs(account1.address, 0);",
                  "err": {},
                  "uuid": "77ede0d6-e611-40bb-ad78-9eea1d10ceaa",
                  "parentUUID": "83721f42-36c2-4772-acf4-6bb780d83bf0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should not execute transaction without minimum confirmations",
                  "fullTitle": "Exchange Contract Transactions Should not execute transaction without minimum confirmations",
                  "timedOut": false,
                  "duration": 623,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await treasury.approveOtherContract(jco.address, multisig.address, 250000000);\nawait jco_manager.connect(account1).confirmTxn_TGW(staking.address, 0);\nawait jco_manager.connect(owner).confirmTxn_TGW(staking.address, 0);\nawait jco_manager.connect(account2).confirmTxn_TGW(staking.address, 0);\nawait jco_manager.executeTxn_TGW(staking.address, 0);\nawait jco_manager.submitTxn_Exchange(account1.address, 10000, \"0x\");\nawait jco_manager.connect(account1).confirmTxn_Exchange(0);\nawait expect(jco_manager.executeTxn_Exchange(0)).to.be.rejectedWith(\"cannot execute tx\");",
                  "err": {},
                  "uuid": "89e56afb-f107-45a7-be10-ac2932536426",
                  "parentUUID": "83721f42-36c2-4772-acf4-6bb780d83bf0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "03ffd7d5-b516-4d90-8df6-98bf0d06c46c",
                "4b6ffd5d-c806-437c-a811-d3cdd1ecf38e",
                "415498df-962a-4765-9957-88f4fb436dca",
                "77ede0d6-e611-40bb-ad78-9eea1d10ceaa",
                "89e56afb-f107-45a7-be10-ac2932536426"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1934,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "dba1b7d9-913a-43c8-80a7-0836eb34ada7",
          "title": "Foundation Contract",
          "fullFile": "D:\\JCO\\main\\test\\7_Foundation_test.js",
          "file": "\\test\\7_Foundation_test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Foundation Contract\"",
              "fullTitle": "Foundation Contract \"before each\" hook in \"Foundation Contract\"",
              "timedOut": false,
              "duration": 1501,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "[owner, account1, account2, account3] = await ethers.getSigners();\naccounts = [owner.address, account1.address, account2.address];\nTreasury = await ethers.getContractFactory(\"Treasury\");\ntreasury = await Treasury.deploy();\nJCO = await ethers.getContractFactory(\"JCO\");\njco = await JCO.deploy(treasury.address, \"JCO_Ganache\", \"JCO\");\nJCO_Manager = await ethers.getContractFactory(\"JCO_Manager\");\njco_manager = await JCO_Manager.deploy(jco.address);\nFundraising = await ethers.getContractFactory(\"Fundraising\");\nfundraising = await Fundraising.deploy(accounts, 2, jco.address, jco_manager.address);\nRewards = await ethers.getContractFactory(\"Rewards\");\nrewards = await Rewards.deploy(accounts, 2, jco.address, jco_manager.address);\nTeam = await ethers.getContractFactory(\"Team\");\nteam = await Team.deploy(accounts, 2, jco.address, jco_manager.address);\nAdvisors = await ethers.getContractFactory(\"Advisors\");\nadvisors = await Advisors.deploy(accounts, 2, jco.address, jco_manager.address);\nMarketing = await ethers.getContractFactory(\"Marketing\");\nmarketing = await Marketing.deploy(accounts, 2, jco.address, jco_manager.address);\nExchange = await ethers.getContractFactory(\"Exchange\");\nexchange = await Exchange.deploy(accounts, 2, jco.address, jco_manager.address);\nFoundation = await ethers.getContractFactory(\"Foundation\");\nfoundation = await Foundation.deploy(accounts, 2, jco.address, jco_manager.address);\nStaking = await ethers.getContractFactory(\"Staking\");\nstaking = await Staking.deploy(accounts, 2, jco.address, jco_manager.address);\nMultiSig_Treasury = await ethers.getContractFactory(\"MultiSig_Treasury\");\nmultisig = await MultiSig_Treasury.deploy(accounts, 2, jco.address, treasury.address, jco_manager.address, [\n    fundraising.address,\n    rewards.address,\n    team.address,\n    advisors.address,\n    marketing.address,\n    exchange.address,\n    foundation.address,\n    staking.address,\n]);\nawait jco_manager.addWallets(\n    treasury.address,\n    multisig.address,\n    fundraising.address,\n    rewards.address,\n    team.address,\n    advisors.address,\n    marketing.address,\n    exchange.address,\n    foundation.address,\n    staking.address\n);",
              "err": {},
              "uuid": "c65bd778-8d8e-4a7a-8571-255a57c93122",
              "parentUUID": "dba1b7d9-913a-43c8-80a7-0836eb34ada7",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "b94be0fd-e80d-4090-8df7-27fa95691aae",
              "title": "Deployment",
              "fullFile": "D:\\JCO\\main\\test\\7_Foundation_test.js",
              "file": "\\test\\7_Foundation_test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should assign the manager",
                  "fullTitle": "Foundation Contract Deployment Should assign the manager",
                  "timedOut": false,
                  "duration": 34,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(await foundation.manager()).to.equal(jco_manager.address);",
                  "err": {},
                  "uuid": "7def0c53-bfd5-4b2e-9c94-34d20f762ac6",
                  "parentUUID": "b94be0fd-e80d-4090-8df7-27fa95691aae",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should set the number of confirmations required",
                  "fullTitle": "Foundation Contract Deployment Should set the number of confirmations required",
                  "timedOut": false,
                  "duration": 37,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(await foundation.numConfirmationsRequired()).to.equal(2);",
                  "err": {},
                  "uuid": "12fed0d6-a8e9-40b8-a97a-7077dd084342",
                  "parentUUID": "b94be0fd-e80d-4090-8df7-27fa95691aae",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should set the owners",
                  "fullTitle": "Foundation Contract Deployment Should set the owners",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(await jco_manager.getOwners_OW()).to.eql(accounts);",
                  "err": {},
                  "uuid": "5f07bc41-7be3-422c-b862-86da0a2a20fa",
                  "parentUUID": "b94be0fd-e80d-4090-8df7-27fa95691aae",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7def0c53-bfd5-4b2e-9c94-34d20f762ac6",
                "12fed0d6-a8e9-40b8-a97a-7077dd084342",
                "5f07bc41-7be3-422c-b862-86da0a2a20fa"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 94,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9875c16a-c658-49f7-97af-a0012332d146",
              "title": "Transactions",
              "fullFile": "D:\\JCO\\main\\test\\7_Foundation_test.js",
              "file": "\\test\\7_Foundation_test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should submit transaction successfully",
                  "fullTitle": "Foundation Contract Transactions Should submit transaction successfully",
                  "timedOut": false,
                  "duration": 78,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tx = await jco_manager.submitTxn_Foundation(account1.address, 100, \"0x\");\nawait tx.wait();\nexpect(tx).to.emit(foundation, \"SubmitTransaction\").withArgs(owner.address, 0, account1.address, 100, \"0x\");",
                  "err": {},
                  "uuid": "0394cf38-c0a6-40ab-bd0b-129fdece3e40",
                  "parentUUID": "9875c16a-c658-49f7-97af-a0012332d146",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should confirm transaction successfully",
                  "fullTitle": "Foundation Contract Transactions Should confirm transaction successfully",
                  "timedOut": false,
                  "duration": 170,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await jco_manager.submitTxn_Foundation(account1.address, 100, \"0x\");\nconst tx = await jco_manager.confirmTxn_Foundation(0);\nawait tx.wait();\nexpect(tx).to.emit(foundation, \"ConfirmTransaction\").withArgs(account1.address, 0);",
                  "err": {},
                  "uuid": "4d18e4f4-f7f5-459b-a000-edc401b1a76b",
                  "parentUUID": "9875c16a-c658-49f7-97af-a0012332d146",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should revoke confirmation successfully",
                  "fullTitle": "Foundation Contract Transactions Should revoke confirmation successfully",
                  "timedOut": false,
                  "duration": 232,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await jco_manager.submitTxn_Foundation(account1.address, 100, \"0x\");\nawait jco_manager.connect(account1).confirmTxn_Foundation(0);\nconst tx = await jco_manager.connect(account1).revokeConfirmation_Foundation(0);\nawait tx.wait();\nexpect(tx).to.emit(foundation, \"RevokeConfirmation\").withArgs(account1.address, 0);",
                  "err": {},
                  "uuid": "b319581b-756d-4731-8f8e-ad381b871efb",
                  "parentUUID": "9875c16a-c658-49f7-97af-a0012332d146",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0394cf38-c0a6-40ab-bd0b-129fdece3e40",
                "4d18e4f4-f7f5-459b-a000-edc401b1a76b",
                "b319581b-756d-4731-8f8e-ad381b871efb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 480,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "3f7d7b34-97f2-493c-9334-b8909b5935b9",
          "title": "Staking Contract",
          "fullFile": "D:\\JCO\\main\\test\\8_Staking_test.js",
          "file": "\\test\\8_Staking_test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Staking Contract\"",
              "fullTitle": "Staking Contract \"before each\" hook in \"Staking Contract\"",
              "timedOut": false,
              "duration": 1439,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "[owner, account1, account2, account3] = await ethers.getSigners();\naccounts = [owner.address, account1.address, account2.address];\nTreasury = await ethers.getContractFactory(\"Treasury\");\ntreasury = await Treasury.deploy();\nJCO = await ethers.getContractFactory(\"JCO\");\njco = await JCO.deploy(treasury.address, \"JCO_Ganache\", \"JCO\");\nJCO_Manager = await ethers.getContractFactory(\"JCO_Manager\");\njco_manager = await JCO_Manager.deploy(jco.address);\nFundraising = await ethers.getContractFactory(\"Fundraising\");\nfundraising = await Fundraising.deploy(accounts, 2, jco.address, jco_manager.address);\nRewards = await ethers.getContractFactory(\"Rewards\");\nrewards = await Rewards.deploy(accounts, 2, jco.address, jco_manager.address);\nTeam = await ethers.getContractFactory(\"Team\");\nteam = await Team.deploy(accounts, 2, jco.address, jco_manager.address);\nAdvisors = await ethers.getContractFactory(\"Advisors\");\nadvisors = await Advisors.deploy(accounts, 2, jco.address, jco_manager.address);\nMarketing = await ethers.getContractFactory(\"Marketing\");\nmarketing = await Marketing.deploy(accounts, 2, jco.address, jco_manager.address);\nExchange = await ethers.getContractFactory(\"Exchange\");\nexchange = await Exchange.deploy(accounts, 2, jco.address, jco_manager.address);\nFoundation = await ethers.getContractFactory(\"Foundation\");\nfoundation = await Foundation.deploy(accounts, 2, jco.address, jco_manager.address);\nStaking = await ethers.getContractFactory(\"Staking\");\nstaking = await Staking.deploy(accounts, 2, jco.address, jco_manager.address);\nMultiSig_Treasury = await ethers.getContractFactory(\"MultiSig_Treasury\");\nmultisig = await MultiSig_Treasury.deploy(accounts, 2, jco.address, treasury.address, jco_manager.address, [\n    fundraising.address,\n    rewards.address,\n    team.address,\n    advisors.address,\n    marketing.address,\n    exchange.address,\n    foundation.address,\n    staking.address,\n]);\nawait jco_manager.addWallets(\n    treasury.address,\n    multisig.address,\n    fundraising.address,\n    rewards.address,\n    team.address,\n    advisors.address,\n    marketing.address,\n    exchange.address,\n    foundation.address,\n    staking.address\n);",
              "err": {},
              "uuid": "27ef2c1a-5f81-4b0f-9fe8-ebdb575d88f9",
              "parentUUID": "3f7d7b34-97f2-493c-9334-b8909b5935b9",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ed7e13ff-a7dc-4a85-8283-6ca61dc379bd",
              "title": "Deployment",
              "fullFile": "D:\\JCO\\main\\test\\8_Staking_test.js",
              "file": "\\test\\8_Staking_test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should assign the manager",
                  "fullTitle": "Staking Contract Deployment Should assign the manager",
                  "timedOut": false,
                  "duration": 35,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(await staking.manager()).to.equal(jco_manager.address);",
                  "err": {},
                  "uuid": "16f9195b-3585-46ac-95d2-e0f06f4bed39",
                  "parentUUID": "ed7e13ff-a7dc-4a85-8283-6ca61dc379bd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should set the number of confirmations required",
                  "fullTitle": "Staking Contract Deployment Should set the number of confirmations required",
                  "timedOut": false,
                  "duration": 34,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(await staking.numConfirmationsRequired()).to.equal(2);",
                  "err": {},
                  "uuid": "b0bd974d-85c6-4575-9e5c-b670b27447f2",
                  "parentUUID": "ed7e13ff-a7dc-4a85-8283-6ca61dc379bd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should set the owners",
                  "fullTitle": "Staking Contract Deployment Should set the owners",
                  "timedOut": false,
                  "duration": 27,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(await jco_manager.getOwners_OW()).to.eql(accounts);",
                  "err": {},
                  "uuid": "891b1690-0d4c-42b9-a44d-70403c5efa1b",
                  "parentUUID": "ed7e13ff-a7dc-4a85-8283-6ca61dc379bd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "16f9195b-3585-46ac-95d2-e0f06f4bed39",
                "b0bd974d-85c6-4575-9e5c-b670b27447f2",
                "891b1690-0d4c-42b9-a44d-70403c5efa1b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 96,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5841035c-843d-4f73-8186-b754dd3c57bf",
              "title": "Transactions",
              "fullFile": "D:\\JCO\\main\\test\\8_Staking_test.js",
              "file": "\\test\\8_Staking_test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should submit transaction with value less than 1000 successfully",
                  "fullTitle": "Staking Contract Transactions Should submit transaction with value less than 1000 successfully",
                  "timedOut": false,
                  "duration": 593,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await treasury.approveOtherContract(jco.address, multisig.address, 250000000);\nawait jco_manager.connect(account1).confirmTxn_TGW(staking.address, 0);\nawait jco_manager.connect(owner).confirmTxn_TGW(staking.address, 0);\nawait jco_manager.connect(account2).confirmTxn_TGW(staking.address, 0);\nawait jco_manager.executeTxn_TGW(staking.address, 0);\nconst tx = await jco_manager.submitTxn_Staking(account1.address, 100, \"0x\");\nawait tx.wait();\nexpect(tx).to.emit(staking, \"Transfer_JCO\").withArgs(staking.address, account1.address, 100);\n// expect(tx).to.emit(staking, \"SubmitTransaction\").withArgs(owner.address, 0, account1.address, 100, \"0x\");",
                  "err": {},
                  "uuid": "6f977e21-35d7-481b-96eb-3ff9681bb72c",
                  "parentUUID": "5841035c-843d-4f73-8186-b754dd3c57bf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should confirm transaction with value more that 1000 successfully",
                  "fullTitle": "Staking Contract Transactions Should confirm transaction with value more that 1000 successfully",
                  "timedOut": false,
                  "duration": 587,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await treasury.approveOtherContract(jco.address, multisig.address, 250000000);\nawait jco_manager.connect(account1).confirmTxn_TGW(staking.address, 0);\nawait jco_manager.connect(owner).confirmTxn_TGW(staking.address, 0);\nawait jco_manager.connect(account2).confirmTxn_TGW(staking.address, 0);\nawait jco_manager.executeTxn_TGW(staking.address, 0);\nawait jco_manager.submitTxn_Staking(account1.address, 10000, \"0x\");\nconst tx = await jco_manager.confirmTxn_Staking(0);\nawait tx.wait();\nexpect(tx).to.emit(staking, \"ConfirmTransaction\").withArgs(account1.address, 0);",
                  "err": {},
                  "uuid": "463dfb53-a3bd-4334-b63d-a9f503c8f6c4",
                  "parentUUID": "5841035c-843d-4f73-8186-b754dd3c57bf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should execute transaction with value more than 1000 successfully",
                  "fullTitle": "Staking Contract Transactions Should execute transaction with value more than 1000 successfully",
                  "timedOut": false,
                  "duration": 766,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await treasury.approveOtherContract(jco.address, multisig.address, 250000000);\nawait jco_manager.connect(account1).confirmTxn_TGW(staking.address, 0);\nawait jco_manager.connect(owner).confirmTxn_TGW(staking.address, 0);\nawait jco_manager.connect(account2).confirmTxn_TGW(staking.address, 0);\nawait jco_manager.executeTxn_TGW(staking.address, 0);\nawait jco_manager.submitTxn_Staking(account1.address, 10000, \"0x\");\nawait jco_manager.connect(owner).confirmTxn_Staking(0);\nawait jco_manager.connect(account1).confirmTxn_Staking(0);\nconst tx = await jco_manager.executeTxn_Staking(0);\nawait tx.wait();\nexpect(tx).to.emit(staking, \"Transfer_JCO\").withArgs(staking.address, account1.address, 10000);\nexpect(tx).to.emit(staking, \"ExecuteTransaction\").withArgs(owner.address, 0);",
                  "err": {},
                  "uuid": "1c234c1a-7225-4077-9477-a5c034e0c80a",
                  "parentUUID": "5841035c-843d-4f73-8186-b754dd3c57bf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should revoke confirmation successfully",
                  "fullTitle": "Staking Contract Transactions Should revoke confirmation successfully",
                  "timedOut": false,
                  "duration": 718,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await treasury.approveOtherContract(jco.address, multisig.address, 250000000);\nawait jco_manager.connect(account1).confirmTxn_TGW(staking.address, 0);\nawait jco_manager.connect(owner).confirmTxn_TGW(staking.address, 0);\nawait jco_manager.connect(account2).confirmTxn_TGW(staking.address, 0);\nawait jco_manager.executeTxn_TGW(staking.address, 0);\nawait jco_manager.submitTxn_Staking(account1.address, 10000, \"0x\");\nawait jco_manager.connect(account1).confirmTxn_Staking(0);\nconst tx = await jco_manager.connect(account1).revokeConfirmation_Staking(0);\nawait tx.wait();\nexpect(tx).to.emit(staking, \"RevokeConfirmation\").withArgs(account1.address, 0);",
                  "err": {},
                  "uuid": "c854f62f-f652-4abc-a213-869292511fa1",
                  "parentUUID": "5841035c-843d-4f73-8186-b754dd3c57bf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should not execute transaction without minimum confirmations",
                  "fullTitle": "Staking Contract Transactions Should not execute transaction without minimum confirmations",
                  "timedOut": false,
                  "duration": 728,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await treasury.approveOtherContract(jco.address, multisig.address, 250000000);\nawait jco_manager.connect(account1).confirmTxn_TGW(staking.address, 0);\nawait jco_manager.connect(owner).confirmTxn_TGW(staking.address, 0);\nawait jco_manager.connect(account2).confirmTxn_TGW(staking.address, 0);\nawait jco_manager.executeTxn_TGW(staking.address, 0);\nawait jco_manager.submitTxn_Staking(account1.address, 10000, \"0x\");\nawait jco_manager.connect(account1).confirmTxn_Staking(0);\nawait expect(jco_manager.executeTxn_Staking(0)).to.be.rejectedWith(\"cannot execute tx\");",
                  "err": {},
                  "uuid": "8282a30a-7f34-4d3d-b794-45be0e96b2e6",
                  "parentUUID": "5841035c-843d-4f73-8186-b754dd3c57bf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6f977e21-35d7-481b-96eb-3ff9681bb72c",
                "463dfb53-a3bd-4334-b63d-a9f503c8f6c4",
                "1c234c1a-7225-4077-9477-a5c034e0c80a",
                "c854f62f-f652-4abc-a213-869292511fa1",
                "8282a30a-7f34-4d3d-b794-45be0e96b2e6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3392,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f4877770-91aa-4976-80d5-1103c8600cc6",
          "title": "MultiSig_Treasury Contract",
          "fullFile": "D:\\JCO\\main\\test\\MultiSig_Treasury_test.js",
          "file": "\\test\\MultiSig_Treasury_test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"MultiSig_Treasury Contract\"",
              "fullTitle": "MultiSig_Treasury Contract \"before each\" hook in \"MultiSig_Treasury Contract\"",
              "timedOut": false,
              "duration": 1507,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(10000);\n[owner, account1, account2, account3] = await ethers.getSigners();\naccounts = [owner.address, account1.address, account2.address];\nTreasury = await ethers.getContractFactory(\"Treasury\");\ntreasury = await Treasury.deploy();\nJCO = await ethers.getContractFactory(\"JCO\");\njco = await JCO.deploy(treasury.address, \"JCO_Ganache\", \"JCO\");\nJCO_Manager = await ethers.getContractFactory(\"JCO_Manager\");\njco_manager = await JCO_Manager.deploy(jco.address);\nFundraising = await ethers.getContractFactory(\"Fundraising\");\nfundraising = await Fundraising.deploy(accounts, 2, jco.address, jco_manager.address);\nRewards = await ethers.getContractFactory(\"Rewards\");\nrewards = await Rewards.deploy(accounts, 2, jco.address, jco_manager.address);\nTeam = await ethers.getContractFactory(\"Team\");\nteam = await Team.deploy(accounts, 2, jco.address, jco_manager.address);\nAdvisors = await ethers.getContractFactory(\"Advisors\");\nadvisors = await Advisors.deploy(accounts, 2, jco.address, jco_manager.address);\nMarketing = await ethers.getContractFactory(\"Marketing\");\nmarketing = await Marketing.deploy(accounts, 2, jco.address, jco_manager.address);\nExchange = await ethers.getContractFactory(\"Exchange\");\nexchange = await Exchange.deploy(accounts, 2, jco.address, jco_manager.address);\nFoundation = await ethers.getContractFactory(\"Foundation\");\nfoundation = await Foundation.deploy(accounts, 2, jco.address, jco_manager.address);\nStaking = await ethers.getContractFactory(\"Staking\");\nstaking = await Staking.deploy(accounts, 2, jco.address, jco_manager.address);\nMultiSig_Treasury = await ethers.getContractFactory(\"MultiSig_Treasury\");\nmultisig = await MultiSig_Treasury.deploy(accounts, 2, jco.address, treasury.address, jco_manager.address, [\n    fundraising.address,\n    rewards.address,\n    team.address,\n    advisors.address,\n    marketing.address,\n    exchange.address,\n    foundation.address,\n    staking.address,\n]);\nawait jco_manager.addWallets(\n    treasury.address,\n    multisig.address,\n    fundraising.address,\n    rewards.address,\n    team.address,\n    advisors.address,\n    marketing.address,\n    exchange.address,\n    foundation.address,\n    staking.address\n);\nawait treasury.approveOtherContract(jco.address, multisig.address, 250_000_000);",
              "err": {},
              "uuid": "07b19c2e-cc0b-46a8-b7a5-e54aafeb9265",
              "parentUUID": "f4877770-91aa-4976-80d5-1103c8600cc6",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "af12bd95-295a-4bf3-80c0-222bebda9994",
              "title": "Deployment",
              "fullFile": "D:\\JCO\\main\\test\\MultiSig_Treasury_test.js",
              "file": "\\test\\MultiSig_Treasury_test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should assign the manager",
                  "fullTitle": "MultiSig_Treasury Contract Deployment Should assign the manager",
                  "timedOut": false,
                  "duration": 37,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(await multisig.manager()).to.equal(jco_manager.address);",
                  "err": {},
                  "uuid": "266fa0fb-d24a-44b4-b32e-544cc733cd05",
                  "parentUUID": "af12bd95-295a-4bf3-80c0-222bebda9994",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should set the owners",
                  "fullTitle": "MultiSig_Treasury Contract Deployment Should set the owners",
                  "timedOut": false,
                  "duration": 24,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(await jco_manager.getOwners_OW()).to.eql(accounts);",
                  "err": {},
                  "uuid": "d1a8b293-5444-44d0-9551-d7d64691dc59",
                  "parentUUID": "af12bd95-295a-4bf3-80c0-222bebda9994",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should set correct transaction count",
                  "fullTitle": "MultiSig_Treasury Contract Deployment should set correct transaction count",
                  "timedOut": false,
                  "duration": 162,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(await jco_manager.getTransactionCount_TGW(fundraising.address)).equal(7);\nexpect(await jco_manager.getTransactionCount_TGW(rewards.address)).equal(4);\nexpect(await jco_manager.getTransactionCount_TGW(team.address)).equal(3);\nexpect(await jco_manager.getTransactionCount_TGW(advisors.address)).equal(3);\nexpect(await jco_manager.getTransactionCount_TGW(marketing.address)).equal(3);\nexpect(await jco_manager.getTransactionCount_TGW(staking.address)).equal(7);\nexpect(await jco_manager.getTransactionCount_TGW(exchange.address)).equal(1);\nexpect(await jco_manager.getTransactionCount_TGW(foundation.address)).equal(3);",
                  "err": {},
                  "uuid": "3b6a62c5-b776-4515-9c9f-8c9f0b928497",
                  "parentUUID": "af12bd95-295a-4bf3-80c0-222bebda9994",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "266fa0fb-d24a-44b4-b32e-544cc733cd05",
                "d1a8b293-5444-44d0-9551-d7d64691dc59",
                "3b6a62c5-b776-4515-9c9f-8c9f0b928497"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 223,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d1d5bda7-fc6f-404a-bae1-a0b81abbc9c5",
              "title": "Transactions",
              "fullFile": "D:\\JCO\\main\\test\\MultiSig_Treasury_test.js",
              "file": "\\test\\MultiSig_Treasury_test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should confirm and execute transaction with current release time",
                  "fullTitle": "MultiSig_Treasury Contract Transactions Should confirm and execute transaction with current release time",
                  "timedOut": false,
                  "duration": 1456,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// await ethers.provider.send(\"evm_increaseTime\", [864000]);\nawait jco_manager.connect(account1).confirmTxn_TGW(fundraising.address, 0);\nawait jco_manager.connect(account2).confirmTxn_TGW(fundraising.address, 0);\nawait jco_manager.executeTxn_TGW(fundraising.address, 0);\nexpect(await jco.balanceOf(fundraising.address)).to.equal(\n    ethers.BigNumber.from(\"5960000\" + \"000000000000000000\")\n);\nawait jco_manager.connect(account1).confirmTxn_TGW(rewards.address, 0);\nawait jco_manager.connect(account2).confirmTxn_TGW(rewards.address, 0);\nawait jco_manager.executeTxn_TGW(rewards.address, 0);\nexpect(await jco.balanceOf(rewards.address)).to.equal(\n    ethers.BigNumber.from(\"1150000\" + \"000000000000000000\")\n);\nawait jco_manager.connect(account1).confirmTxn_TGW(marketing.address, 0);\nawait jco_manager.connect(account2).confirmTxn_TGW(marketing.address, 0);\nawait jco_manager.executeTxn_TGW(marketing.address, 0);\nexpect(await jco.balanceOf(marketing.address)).to.equal(\n    ethers.BigNumber.from(\"15000000\" + \"000000000000000000\")\n);\nawait jco_manager.connect(account1).confirmTxn_TGW(staking.address, 0);\nawait jco_manager.connect(account2).confirmTxn_TGW(staking.address, 0);\nawait jco_manager.executeTxn_TGW(staking.address, 0);\nexpect(await jco.balanceOf(staking.address)).to.equal(\n    ethers.BigNumber.from(\"12500000\" + \"000000000000000000\")\n);\nawait jco_manager.connect(account1).confirmTxn_TGW(exchange.address, 0);\nawait jco_manager.connect(account2).confirmTxn_TGW(exchange.address, 0);\nawait jco_manager.executeTxn_TGW(exchange.address, 0);\nexpect(await jco.balanceOf(exchange.address)).to.equal(\n    ethers.BigNumber.from(\"25000000\" + \"000000000000000000\")\n);",
                  "err": {},
                  "uuid": "94a4a978-333e-48d6-8b23-d5b58e998e68",
                  "parentUUID": "d1d5bda7-fc6f-404a-bae1-a0b81abbc9c5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should confirm and execute transaction with release time 3 months or 90 days ahead",
                  "fullTitle": "MultiSig_Treasury Contract Transactions Should confirm and execute transaction with release time 3 months or 90 days ahead",
                  "timedOut": false,
                  "duration": 867,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await ethers.provider.send(\"evm_increaseTime\", [86400 * 90]);\nawait ethers.provider.send(\"evm_mine\", []);\nawait jco_manager.connect(account1).confirmTxn_TGW(fundraising.address, 1);\nawait jco_manager.connect(account2).confirmTxn_TGW(fundraising.address, 1);\nawait jco_manager.executeTxn_TGW(fundraising.address, 1);\nexpect(await jco.balanceOf(fundraising.address)).to.equal(\n    ethers.BigNumber.from((3960000).toString() + \"000000000000000000\")\n);\nawait jco_manager.connect(account1).confirmTxn_TGW(rewards.address, 1);\nawait jco_manager.connect(account2).confirmTxn_TGW(rewards.address, 1);\nawait jco_manager.executeTxn_TGW(rewards.address, 1);\nexpect(await jco.balanceOf(rewards.address)).to.equal(\n    ethers.BigNumber.from((1150000).toString() + \"000000000000000000\")\n);\nawait jco_manager.connect(account1).confirmTxn_TGW(staking.address, 1);\nawait jco_manager.connect(account2).confirmTxn_TGW(staking.address, 1);\nawait jco_manager.executeTxn_TGW(staking.address, 1);\nexpect(await jco.balanceOf(staking.address)).to.equal(\n    ethers.BigNumber.from((12500000).toString() + \"000000000000000000\")\n);",
                  "err": {},
                  "uuid": "f6006343-438b-4ab6-bfec-842b725c7363",
                  "parentUUID": "d1d5bda7-fc6f-404a-bae1-a0b81abbc9c5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should confirm and execute transaction with release time 6 months or 182 days ahead",
                  "fullTitle": "MultiSig_Treasury Contract Transactions Should confirm and execute transaction with release time 6 months or 182 days ahead",
                  "timedOut": false,
                  "duration": 1391,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await ethers.provider.send(\"evm_increaseTime\", [86400 * 182]);\nawait ethers.provider.send(\"evm_mine\", []);\nawait jco_manager.connect(account1).confirmTxn_TGW(fundraising.address, 2);\nawait jco_manager.connect(account2).confirmTxn_TGW(fundraising.address, 2);\nawait jco_manager.executeTxn_TGW(fundraising.address, 2);\nexpect(await jco.balanceOf(fundraising.address)).to.equal(\n    ethers.BigNumber.from((5710000).toString() + \"000000000000000000\")\n);\nawait jco_manager.connect(account1).confirmTxn_TGW(rewards.address, 2);\nawait jco_manager.connect(account2).confirmTxn_TGW(rewards.address, 2);\nawait jco_manager.executeTxn_TGW(rewards.address, 2);\nexpect(await jco.balanceOf(rewards.address)).to.equal(\n    ethers.BigNumber.from((1150000).toString() + \"000000000000000000\")\n);\nawait jco_manager.connect(account1).confirmTxn_TGW(marketing.address, 1);\nawait jco_manager.connect(account2).confirmTxn_TGW(marketing.address, 1);\nawait jco_manager.executeTxn_TGW(marketing.address, 1);\nexpect(await jco.balanceOf(marketing.address)).to.equal(\n    ethers.BigNumber.from((15000000).toString() + \"000000000000000000\")\n);\nawait jco_manager.connect(account1).confirmTxn_TGW(staking.address, 2);\nawait jco_manager.connect(account2).confirmTxn_TGW(staking.address, 2);\nawait jco_manager.executeTxn_TGW(staking.address, 2);\nexpect(await jco.balanceOf(staking.address)).to.equal(\n    ethers.BigNumber.from((12500000).toString() + \"000000000000000000\")\n);\nawait jco_manager.connect(account1).confirmTxn_TGW(foundation.address, 0);\nawait jco_manager.connect(account2).confirmTxn_TGW(foundation.address, 0);\nawait jco_manager.executeTxn_TGW(foundation.address, 0);\nexpect(await jco.balanceOf(foundation.address)).to.equal(\n    ethers.BigNumber.from((7500000).toString() + \"000000000000000000\")\n);",
                  "err": {},
                  "uuid": "4eaf2eb4-b320-45be-82ba-0dc39df8ac1f",
                  "parentUUID": "d1d5bda7-fc6f-404a-bae1-a0b81abbc9c5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should confirm and execute transaction with release time 9 months or 273 days ahead",
                  "fullTitle": "MultiSig_Treasury Contract Transactions Should confirm and execute transaction with release time 9 months or 273 days ahead",
                  "timedOut": false,
                  "duration": 909,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await ethers.provider.send(\"evm_increaseTime\", [86400 * 273]);\nawait ethers.provider.send(\"evm_mine\", []);\nawait jco_manager.connect(account1).confirmTxn_TGW(fundraising.address, 3);\nawait jco_manager.connect(account2).confirmTxn_TGW(fundraising.address, 3);\nawait jco_manager.executeTxn_TGW(fundraising.address, 3);\nexpect(await jco.balanceOf(fundraising.address)).to.equal(\n    ethers.BigNumber.from((5710000).toString() + \"000000000000000000\")\n);\nawait jco_manager.connect(account1).confirmTxn_TGW(rewards.address, 3);\nawait jco_manager.connect(account2).confirmTxn_TGW(rewards.address, 3);\nawait jco_manager.executeTxn_TGW(rewards.address, 3);\nexpect(await jco.balanceOf(rewards.address)).to.equal(\n    ethers.BigNumber.from((1150000).toString() + \"000000000000000000\")\n);\nawait jco_manager.connect(account1).confirmTxn_TGW(staking.address, 3);\nawait jco_manager.connect(account2).confirmTxn_TGW(staking.address, 3);\nawait jco_manager.executeTxn_TGW(staking.address, 3);\nexpect(await jco.balanceOf(staking.address)).to.equal(\n    ethers.BigNumber.from((12500000).toString() + \"000000000000000000\")\n);",
                  "err": {},
                  "uuid": "127aa033-7d97-40ef-928f-a11f89e17981",
                  "parentUUID": "d1d5bda7-fc6f-404a-bae1-a0b81abbc9c5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should confirm and execute transaction with release time 12 months or 365 days ahead",
                  "fullTitle": "MultiSig_Treasury Contract Transactions Should confirm and execute transaction with release time 12 months or 365 days ahead",
                  "timedOut": false,
                  "duration": 1517,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await ethers.provider.send(\"evm_increaseTime\", [86400 * 365]);\nawait ethers.provider.send(\"evm_mine\", []);\nawait jco_manager.connect(account1).confirmTxn_TGW(fundraising.address, 4);\nawait jco_manager.connect(account2).confirmTxn_TGW(fundraising.address, 4);\nawait jco_manager.executeTxn_TGW(fundraising.address, 4);\nexpect(await jco.balanceOf(fundraising.address)).to.equal(\n    ethers.BigNumber.from((3960000).toString() + \"000000000000000000\")\n);\nawait jco_manager.connect(account1).confirmTxn_TGW(team.address, 0);\nawait jco_manager.connect(account2).confirmTxn_TGW(team.address, 0);\nawait jco_manager.executeTxn_TGW(team.address, 0);\nexpect(await jco.balanceOf(team.address)).to.equal(\n    ethers.BigNumber.from((6000000).toString() + \"000000000000000000\")\n);\nawait jco_manager.connect(account1).confirmTxn_TGW(advisors.address, 0);\nawait jco_manager.connect(account2).confirmTxn_TGW(advisors.address, 0);\nawait jco_manager.executeTxn_TGW(advisors.address, 0);\nexpect(await jco.balanceOf(advisors.address)).to.equal(\n    ethers.BigNumber.from((5000000).toString() + \"000000000000000000\")\n);\nawait jco_manager.connect(account1).confirmTxn_TGW(staking.address, 4);\nawait jco_manager.connect(account2).confirmTxn_TGW(staking.address, 4);\nawait jco_manager.executeTxn_TGW(staking.address, 4);\nexpect(await jco.balanceOf(staking.address)).to.equal(\n    ethers.BigNumber.from((12500000).toString() + \"000000000000000000\")\n);\nawait jco_manager.connect(account1).confirmTxn_TGW(foundation.address, 1);\nawait jco_manager.connect(account2).confirmTxn_TGW(foundation.address, 1);\nawait jco_manager.executeTxn_TGW(foundation.address, 1);\nexpect(await jco.balanceOf(foundation.address)).to.equal(\n    ethers.BigNumber.from((7500000).toString() + \"000000000000000000\")\n);",
                  "err": {},
                  "uuid": "42cf84b6-c605-437d-8857-4cb819fa77e1",
                  "parentUUID": "d1d5bda7-fc6f-404a-bae1-a0b81abbc9c5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should confirm and execute transaction with release time 15 months or 456 days ahead",
                  "fullTitle": "MultiSig_Treasury Contract Transactions Should confirm and execute transaction with release time 15 months or 456 days ahead",
                  "timedOut": false,
                  "duration": 333,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await ethers.provider.send(\"evm_increaseTime\", [86400 * 456]);\nawait ethers.provider.send(\"evm_mine\", []);\nawait jco_manager.connect(account1).confirmTxn_TGW(fundraising.address, 5);\nawait jco_manager.connect(account2).confirmTxn_TGW(fundraising.address, 5);\nawait jco_manager.executeTxn_TGW(fundraising.address, 5);\nexpect(await jco.balanceOf(fundraising.address)).to.equal(\n    ethers.BigNumber.from((5710000).toString() + \"000000000000000000\")\n);",
                  "err": {},
                  "uuid": "a4b5c688-d60c-4882-8b95-247737d4b30d",
                  "parentUUID": "d1d5bda7-fc6f-404a-bae1-a0b81abbc9c5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should confirm and execute transaction with release time 18 months or 547 days ahead",
                  "fullTitle": "MultiSig_Treasury Contract Transactions Should confirm and execute transaction with release time 18 months or 547 days ahead",
                  "timedOut": false,
                  "duration": 1554,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await ethers.provider.send(\"evm_increaseTime\", [86400 * 547]);\nawait ethers.provider.send(\"evm_mine\", []);\nawait jco_manager.connect(account1).confirmTxn_TGW(fundraising.address, 6);\nawait jco_manager.connect(account2).confirmTxn_TGW(fundraising.address, 6);\nawait jco_manager.executeTxn_TGW(fundraising.address, 6);\nexpect(await jco.balanceOf(fundraising.address)).to.equal(\n    ethers.BigNumber.from((4390000).toString() + \"000000000000000000\")\n);\nawait jco_manager.connect(account1).confirmTxn_TGW(team.address, 1);\nawait jco_manager.connect(account2).confirmTxn_TGW(team.address, 1);\nawait jco_manager.executeTxn_TGW(team.address, 1);\nexpect(await jco.balanceOf(team.address)).to.equal(\n    ethers.BigNumber.from((6000000).toString() + \"000000000000000000\")\n);\nawait jco_manager.connect(account1).confirmTxn_TGW(marketing.address, 2);\nawait jco_manager.connect(account2).confirmTxn_TGW(marketing.address, 2);\nawait jco_manager.executeTxn_TGW(marketing.address, 2);\nexpect(await jco.balanceOf(marketing.address)).to.equal(\n    ethers.BigNumber.from((12500000).toString() + \"000000000000000000\")\n);\nawait jco_manager.connect(account1).confirmTxn_TGW(staking.address, 5);\nawait jco_manager.connect(account2).confirmTxn_TGW(staking.address, 5);\nawait jco_manager.executeTxn_TGW(staking.address, 5);\nexpect(await jco.balanceOf(staking.address)).to.equal(\n    ethers.BigNumber.from((12500000).toString() + \"000000000000000000\")\n);\nawait jco_manager.connect(account1).confirmTxn_TGW(foundation.address, 2);\nawait jco_manager.connect(account2).confirmTxn_TGW(foundation.address, 2);\nawait jco_manager.executeTxn_TGW(foundation.address, 2);\nexpect(await jco.balanceOf(foundation.address)).to.equal(\n    ethers.BigNumber.from((7500000).toString() + \"000000000000000000\")\n);",
                  "err": {},
                  "uuid": "5c32898c-02af-4d7c-8118-53eced59b9a2",
                  "parentUUID": "d1d5bda7-fc6f-404a-bae1-a0b81abbc9c5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should confirm and execute transaction with release time 24 months or 730 days ahead",
                  "fullTitle": "MultiSig_Treasury Contract Transactions Should confirm and execute transaction with release time 24 months or 730 days ahead",
                  "timedOut": false,
                  "duration": 817,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await ethers.provider.send(\"evm_increaseTime\", [86400 * 730]);\nawait ethers.provider.send(\"evm_mine\", []);\nawait jco_manager.connect(account1).confirmTxn_TGW(team.address, 2);\nawait jco_manager.connect(account2).confirmTxn_TGW(team.address, 2);\nawait jco_manager.executeTxn_TGW(team.address, 2);\nexpect(await jco.balanceOf(team.address)).to.equal(\n    ethers.BigNumber.from((8000000).toString() + \"000000000000000000\")\n);\nawait jco_manager.connect(account1).confirmTxn_TGW(advisors.address, 1);\nawait jco_manager.connect(account2).confirmTxn_TGW(advisors.address, 1);\nawait jco_manager.executeTxn_TGW(advisors.address, 1);\nexpect(await jco.balanceOf(advisors.address)).to.equal(\n    ethers.BigNumber.from((5000000).toString() + \"000000000000000000\")\n);\nawait jco_manager.connect(account1).confirmTxn_TGW(staking.address, 6);\nawait jco_manager.connect(account2).confirmTxn_TGW(staking.address, 6);\nawait jco_manager.executeTxn_TGW(staking.address, 6);\nexpect(await jco.balanceOf(staking.address)).to.equal(\n    ethers.BigNumber.from((12500000).toString() + \"000000000000000000\")\n);",
                  "err": {},
                  "uuid": "0f4a8e76-0b8e-4c2e-a6f1-3a423beee64a",
                  "parentUUID": "d1d5bda7-fc6f-404a-bae1-a0b81abbc9c5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should confirm and execute transaction with release time 36 months or 1095 days ahead",
                  "fullTitle": "MultiSig_Treasury Contract Transactions Should confirm and execute transaction with release time 36 months or 1095 days ahead",
                  "timedOut": false,
                  "duration": 235,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await ethers.provider.send(\"evm_increaseTime\", [86400 * 1095]);\nawait ethers.provider.send(\"evm_mine\", []);\nawait jco_manager.connect(account1).confirmTxn_TGW(advisors.address, 2);\nawait jco_manager.connect(account2).confirmTxn_TGW(advisors.address, 2);\nawait jco_manager.executeTxn_TGW(advisors.address, 2);\nexpect(await jco.balanceOf(advisors.address)).to.equal(\n    ethers.BigNumber.from((2500000).toString() + \"000000000000000000\")\n);",
                  "err": {},
                  "uuid": "bed53d33-375e-4a74-a013-66c72f50a68f",
                  "parentUUID": "d1d5bda7-fc6f-404a-bae1-a0b81abbc9c5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "94a4a978-333e-48d6-8b23-d5b58e998e68",
                "f6006343-438b-4ab6-bfec-842b725c7363",
                "4eaf2eb4-b320-45be-82ba-0dc39df8ac1f",
                "127aa033-7d97-40ef-928f-a11f89e17981",
                "42cf84b6-c605-437d-8857-4cb819fa77e1",
                "a4b5c688-d60c-4882-8b95-247737d4b30d",
                "5c32898c-02af-4d7c-8118-53eced59b9a2",
                "0f4a8e76-0b8e-4c2e-a6f1-3a423beee64a",
                "bed53d33-375e-4a74-a013-66c72f50a68f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 9079,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}